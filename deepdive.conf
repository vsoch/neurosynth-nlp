deepdive {

  # Variables
  schema.variables {
  
  }

  # Extractors
  extraction.extractors {

    # Extractor #0: NeuroSynth Articles to Sentences
    ext_sentences {
      input: """
        SELECT  article_id, text
        FROM    articles
        ORDER BY article_id ASC
        """
      output_relation : "sentences"
      udf             : "examples/nlp_extractor/run.sh -k article_id -v text -l 100 -t 4"
    }

    # Extractor 1: Clean output tables of all extractors
    ext_clear_table {
      style: "sql_extractor"
      sql: """
        DELETE FROM region_mentions;
        DELETE FROM concept_mentions;
        """
    }

    # Extractor 2: Extract mentions of brain regions
    ext_regions {

      # The style of the extractor
      style: "tsv_extractor"

      # An input to the extractor is a row (tuple) of the following query:
      input: """
          SELECT  sentence_id,
                  array_to_string(words, '~^~'),
                  array_to_string(ner_tags, '~^~')
          FROM    sentences
          """

      # output of extractor will be written to this table:
      output_relation: "region_mentions"

      # This user-defined function will be performed on each row (tuple) of input query:
      udf: ${APP_HOME}"/udf/ext_regions.py "${APP_HOME}"/udf/NER/brain_regions.json"

      dependencies: ["ext_clear_table"]

    }

    # Extractor 3: Extract mentions of cognitive concepts
    ext_concepts {

      # The style of the extractor
      style: "tsv_extractor"

      # An input to the extractor is a row (tuple) of the following query:
      input: """
          SELECT  sentence_id,
                  array_to_string(words, '~^~'),
                  array_to_string(ner_tags, '~^~')
          FROM    sentences
          """

      # output of extractor will be written to this table:
      output_relation: "concept_mentions"

      # This user-defined function will be performed on each row (tuple) of input query:
      udf: ${APP_HOME}"/udf/ext_concepts.py"

      dependencies: ["ext_clear_table"]

    }

  }

  # Inference rules
  inference.factors: {

  }

  # Specify a holdout fraction to hold out randomly
  calibration.holdout_fraction: 0.25


  # PIPELINES
  pipeline.pipelines.nlp_extract: [
    "ext_sentences"    # NLP extractor, takes very long
  ]

  pipeline.pipelines.mentions_extract: [
    "ext_clear_table", "ext_regions","ext_concepts"
  ]



}
